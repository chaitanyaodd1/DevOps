1] Theory: Data Center management, agile ...														15:17 18-05-2024
2] Theory+lab

1. DevOps + CI/CD : Git+Github , Docker , Kubernetes , Jenkins
2. Cloud: AWS
3. Monitoring tools/Automation tools: Chef, Puppet, Nagios, Prometheus
4. Storage area Networks (SAN)/ Network automation
````````````````````````````````````````````````````````````````````````````````


CI/CD
'''''
Continuos Integration and Continuos Development

code -> commit -> |build -> unit test -> Integration test| ->| review -> Staging -> production|
	   ^      |                                      |   |                                |
	   |      |        CI Pipeline                   |   |      CD Pipeline               |
	Related
	code	
````````````````````````````````````````````````````````````````````````````````````````````````


Tools Used
::::::::::



GitHub----->Jenkins -----------------> Ansible --------->Kubernetes
 |             |                          \             /
 |             |                           \           /
 |             |                            \         /
GIT           Maven                          DockerHub
````````````````````````````````````````````````````````````````````````````````````````````````````
GIT & Github
::::::::::::

Version Control: Version control, also known as source control, is the practice of tracking and managing 
'''''''''''''''	 changes to software code. Version control systems are software tools that help software 
		 teams manage changes to source code over time.

Repository: A Centralised storage for managing and tracking changes to the collection of the files and
	    directories.

			Developer push the code to a repository
					||
			code will be deployed from the repository

	•) now if someone wants the code he/she will have to fetch the code from Repository
						||
					      modify
						||
					Push back to repository

•) Types of version Control system

1. Centralised							2. Distributed






-----------------------------------------------------------------------------

•] Git and Github parts
   ````````````````````                                 |         ••
workspace ----> staging/indexing ----> Local Repository |    •   Remote    •
		     area			        |     •Repository •
                 						  ••

•)Workspace- Area where the Developer is working and creating/modifying code.
•)Inex/staging area - Area that closely mimics the local repo.
•)local repo - the local area for all the local code.
•)remote repo- the remote area {GitHub} for all the code.	

Git Workflow -1

• git init: Git will create "Workspace"
** never do "git init" in a sub-dir of directory where "git init" is already initialised
• git add file1: Add the to  the "Staging area"
• git commit:
• git push: the changes will go to the "Remote Repository"

Git CMDS
''''''''
• git clone
• git init
• git add
• git commit -m "message"
• git config --global user.name "username"
• git config --global user.email "email@user"
• git branch -M main
• git remote add origin (repo URl)
• git push -u origin main
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````


Docker and Containerization
:::::::::::::::::::::::::::

Container technology: It refers to a lightweight, executable unit of software that packages up 
		      application code and its dependencies.
Containerization:Containerization refers to the process of packaging software code along with 
		 its necessary dependencies (such as operating system libraries) into a single 
		 lightweight executable unit called a container.

~~~Image and Conatiner
   ```````````````````
•)Build: Create an image.
•)Run: run the image as a conatiner.
|__________________________________________________|
|Docker Build --->Image--->Docker Run--->Conatiner |
|  Command		   Command                 |
|--------------------------------------------------|

•)conatiner = lightweight

 Container--->¦•App		   ¦	
	      ¦•Lib		   ¦  
	      ¦•linux user space   ¦
              ----------------------
	      ¦•Docker linux kernal¦
	      ``````````````````````
	       •Host OS
	       •Hardware


⁂ DOCKER
'''''''''
• Docker is an open-source platform that enables developers to build, deploy, run, update, and manage standardized,
  executable components called containers. These containers combine application source code with the necessary 
  operating system libraries and dependencies required to run that code in any environment.


• Runs as an application in a sandbox.
• It's PORTABLE.
• We can reun several conatainers on a machine at the same time.
• Self-conatined: do not alter host system.
•"IF SOMETHING WORKS IN DEVELOPMENT, IT WILL WORK IN PRODUCTION"



Commands:
'''''''''


•docker run <CONATAINER> : Container will start and immediatly stop automatically.
•docker run -dit <CONATAINER>:Conatiner will stat and keep running in the background(detached)... To stop this, we will 
			     need to use docker conatainer stop command
•docker run -it <CONATAINER>:Container will start in an interactive terminal mode (it will open a 
			    shell inside the conatainer)... To stop this, we will need to use exit 
			    command.	
•docker container list: list of all conatiners.
•docker ps: list of running conatiners.
•docker stop <ID>or <NAME>
•docker images or docker image list : see the list of image.
•docker inspect: Inspect a conatiner
•docker pull : pull an image(From dockerhub)
•docker history<image>: how was the images created.
•docker tag


Types of conatiner that we run:
``````````````````````````````````

1. General-purpose/long time running: Debian/ubuntu/....,
   tomcat, mysql,....
   => use '-it'
2. One-time/Short term: "Hello World"
   => Not use '-it'














































































